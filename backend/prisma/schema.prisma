// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Council {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  country     String   @default("NZ")
  region      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permitTypes PermitType[]
  applications Application[]

  @@map("councils")
}

model PermitType {
  id          String   @id @default(cuid())
  name        String
  code        String
  description String?
  requirements Json?    // Flexible requirements structure
  fees        Json?     // Fee structure
  councilId   String
  isActive    Boolean   @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  council     Council @relation(fields: [councilId], references: [id], onDelete: Cascade)
  applications Application[]

  @@unique([councilId, code])
  @@map("permit_types")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  address   Json?    // Structured address data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  applications Application[]

  @@map("users")
}

model Application {
  id          String   @id @default(cuid())
  reference   String   @unique
  status      ApplicationStatus @default(SUBMITTED)
  userId      String
  councilId   String
  permitTypeId String
  data        Json     // Form data
  documents   Json?    // Document references
  aiAnalysis  Json?    // AI analysis results
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  processedAt DateTime?

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  council     Council @relation(fields: [councilId], references: [id], onDelete: Cascade)
  permitType  PermitType @relation(fields: [permitTypeId], references: [id], onDelete: Cascade)

  @@map("applications")
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
} 